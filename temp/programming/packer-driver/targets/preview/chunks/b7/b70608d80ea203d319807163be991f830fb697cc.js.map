{"version":3,"sources":["file:///C:/Users/user/StickHero/assets/scripts/GameManager.ts"],"names":["_decorator","Component","Node","Prefab","input","Input","UITransform","GameModel","GameView","AnimationHelper","ccclass","property","GameManager","type","Boolean","model","view","isPlaying","currentScaleY","isTransitioning","start","on","EventType","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","isRetry","reset","resetGame","resetScene","startColumnX","playerX","calculateInitialPositions","setStartColumnX","setPlayerX","setupNextColumn","setNextColumnX","randomPosition","getStartColumnNode","setPosition","position","y","getNextColumnNode","updatePlayer","showStartScreen","onStartButton","gameView","Error","showPlayScreen","nextColumnX","getPlayerNode","animateInitialSetup","console","error","updateScoreDisplay","getScore","onRetryButtonPressed","getCanvasWidth","getNodeWidth","isStickGrowing","startColumn","setStickGrowing","startX","getStartColumnX","startY","getNodeHeight","createStick","dropStick","stick","checkResult","nextColumn","player","startRightX","x","stickLength","scale","stickEndX","animatePlayerToStickEnd","landed","checkStickLanding","handleSuccess","handleFailure","showGameOverScreen","nextLeftX","nextRightX","newStartColumnX","offset","newPlayerX","stickNode","destroy","removeFromParent","updateColumnReferences","newNextColumnX","animateSceneShift","incrementScore","animatePlayerFall","update","deltaTime","maxScaleY","growthSpeed","getGrowthSpeed","updateStick","getStickAngle","node","getComponent","width","height"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, input, Input, UITransform } from 'cc';\nimport { GameModel } from './GameModel';\nimport { GameView } from './GameView';\nimport { PositionCalculator } from './PositionCalculator';\nimport { AnimationHelper } from './AnimationHelper';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n    @property(Prefab)\n    playerPrefab: Prefab = null;\n\n    @property(Prefab) \n    stickPrefab: Prefab = null;\n\n    @property(Prefab)\n    columnPrefab: Prefab = null;\n\n    @property(Node) \n    startScreen: Node = null;\n    \n    @property(GameView) \n    gameView: GameView = null;\n\n    private model: GameModel = new GameModel();\n    private view: GameView | null = null;\n    private isPlaying: boolean = false;\n    private currentScaleY: number = 0;\n    @property({ type: Boolean }) isRetry: boolean = false;\n    private isTransitioning: boolean = false;\n\n    start() {\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\n        this.isRetry = false;\n        this.model.reset();\n    }\n\n    private resetGame() {\n        this.isPlaying = false;\n        this.model.reset();\n        this.view!.resetScene();\n\n        const { startColumnX, playerX } = this.calculateInitialPositions();\n        this.model.setStartColumnX(startColumnX);\n        this.model.setPlayerX(playerX);\n\n        if (this.isRetry) {\n            this.view!.setupNextColumn(startColumnX);\n            this.model.setNextColumnX(this.view!.randomPosition);\n            this.view!.getStartColumnNode()!.setPosition(startColumnX, this.view!.getStartColumnNode()!.position.y, 0);\n            this.view!.getNextColumnNode()!.setPosition(this.view!.randomPosition, this.view!.getNextColumnNode()!.position.y, 0);\n            this.view!.updatePlayer(playerX, true);\n        }\n\n        this.view!.showStartScreen();\n    }\n\n    onStartButton() {\n        if (!this.view) {\n            if (!this.gameView) throw new Error(\"gameView is not assigned!\");\n            this.view = this.gameView;\n        }\n\n        this.isPlaying = true;\n        this.view.showPlayScreen();\n\n        const { startColumnX, playerX } = this.calculateInitialPositions();\n\n        if (!this.isRetry) {\n            this.view.setupNextColumn(startColumnX);\n            const nextColumnX = this.view.randomPosition;\n            this.model.setStartColumnX(startColumnX);\n            this.model.setPlayerX(playerX);\n            this.model.setNextColumnX(nextColumnX);\n            if (this.view.getStartColumnNode() && this.view.getPlayerNode() && this.view.getNextColumnNode()) {\n                this.view.animateInitialSetup(startColumnX, playerX, nextColumnX);\n            } else {\n                console.error(\"Cannot animate initial setup: one of the nodes is null\");\n            }\n        }\n\n        this.view.updateScoreDisplay(this.model.getScore());\n    }\n\n    onRetryButtonPressed() {\n        this.isRetry = true;\n        this.resetGame();\n        this.onStartButton();\n    }\n\n    private calculateInitialPositions(): { startColumnX: number, playerX: number } {\n        const startColumnX = -this.view!.getCanvasWidth() / 2 + this.getNodeWidth(this.view!.getStartColumnNode()!) / 2;\n        const playerX = startColumnX + this.getNodeWidth(this.view!.getPlayerNode()!) / 4;\n        return { startColumnX, playerX };\n    }\n\n    private onTouchStart() {\n        if (!this.isPlaying || this.model.isStickGrowing() || this.isTransitioning) return;\n        const startColumn = this.view!.getStartColumnNode()!;\n        this.model.setStickGrowing(true);\n        this.currentScaleY = 0.1;\n        const startX = this.model.getStartColumnX() + this.getNodeWidth(startColumn) / 2;\n        const startY = startColumn.position.y + this.getNodeHeight(startColumn) / 2;\n        this.view!.createStick(startX, startY);\n    }\n\n    private onTouchEnd() {\n        if (!this.isPlaying || !this.model.isStickGrowing()) return;\n        this.model.setStickGrowing(false);\n        this.view!.dropStick(false, (stick) => this.checkResult(stick));\n    }\n\n    private checkResult(stick: Node) {\n        try {\n            const startColumn = this.view!.getStartColumnNode()!;\n            const nextColumn = this.view!.getNextColumnNode()!;\n            const player = this.view!.getPlayerNode()!;\n\n            const startRightX = startColumn.position.x + this.getNodeWidth(startColumn) / 2;\n            const stickLength = this.getNodeHeight(stick) * stick.scale.y;\n            const stickEndX = startRightX + stickLength;\n\n            this.view!.animatePlayerToStickEnd(stickEndX, () => {\n                const landed = this.checkStickLanding(stickEndX, nextColumn);\n                if (landed) {\n                    this.handleSuccess(player, nextColumn);\n                } else {\n                    this.handleFailure(player);\n                }\n            });\n        } catch (error) {\n            console.error(\"Ошибка в checkResult:\", error);\n            this.isPlaying = false;\n            this.view!.showGameOverScreen(this.model.getScore());\n        }\n    }\n\n    private checkStickLanding(stickEndX: number, nextColumn: Node): boolean {\n        const nextLeftX = nextColumn.position.x - this.getNodeWidth(nextColumn) / 2;\n        const nextRightX = nextColumn.position.x + this.getNodeWidth(nextColumn) / 2;\n        return stickEndX >= nextLeftX && stickEndX <= nextRightX;\n    }\n\n    private handleSuccess(player: Node, nextColumn: Node) {\n        const playerX = nextColumn.position.x + this.getNodeWidth(player) / 4;\n        this.view!.updatePlayer(playerX, false);\n\n        const newStartColumnX = -this.view!.getCanvasWidth() / 2 + this.getNodeWidth(nextColumn) / 2;\n        const offset = nextColumn.position.x - newStartColumnX;\n        const newPlayerX = playerX - offset;\n\n        this.isTransitioning = true;\n        this.view!.stickNode?.destroy();\n        this.view!.stickNode = null;\n\n        this.view!.getStartColumnNode()!.removeFromParent();\n        this.view!.getStartColumnNode()!.destroy();\n\n        this.view!.updateColumnReferences(nextColumn, null);\n        this.view!.setupNextColumn(newStartColumnX);\n        const newNextColumnX = this.view!.randomPosition;\n        this.model.setNextColumnX(newNextColumnX);\n\n        this.view!.animateSceneShift(0, newStartColumnX, newPlayerX, newNextColumnX, () => {\n            this.model.setStartColumnX(newStartColumnX);\n            this.model.setPlayerX(newPlayerX);\n            this.model.incrementScore();\n            this.view!.updateScoreDisplay(this.model.getScore());\n            this.isTransitioning = false;\n        });\n    }\n\n    private handleFailure(player: Node) {\n        AnimationHelper.animatePlayerFall(player, () => {\n            this.isPlaying = false;\n            this.view!.showGameOverScreen(this.model.getScore());\n        });\n    }\n\n    update(deltaTime: number) {\n        if (!this.isPlaying || !this.model.isStickGrowing() || !this.view?.stickNode) return;\n\n        const stick = this.view.stickNode;\n        const maxScaleY = 1000 / this.getNodeHeight(stick);\n        const growthSpeed = this.view.getGrowthSpeed();\n        this.currentScaleY += growthSpeed * deltaTime;\n\n        if (this.currentScaleY >= maxScaleY) {\n            this.currentScaleY = maxScaleY;\n            this.model.setStickGrowing(false);\n            this.view.dropStick(false, (stick) => this.checkResult(stick));\n        }\n\n        this.view.updateStick(this.currentScaleY, this.model.getStickAngle());\n    }\n\n    private getNodeWidth(node: Node): number {\n        return node.getComponent(UITransform)!.width;\n    }\n\n    private getNodeHeight(node: Node): number {\n        return node.getComponent(UITransform)!.height;\n    }\n}"]}