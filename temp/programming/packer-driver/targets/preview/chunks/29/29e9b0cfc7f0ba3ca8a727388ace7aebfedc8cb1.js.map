{"version":3,"sources":["file:///C:/Users/user/StickHero/assets/scripts/GameView.ts"],"names":["_decorator","Component","Node","UITransform","Vec3","director","instantiate","Prefab","Label","PositionCalculator","AnimationHelper","ccclass","property","GameView","type","Number","tooltip","playerNode","stickNode","startColumnNode","nextColumnNode","canvasWidth","columnHeight","prefabColumnWidth","randomPosition","start","setScreenIndices","getNodeWidth","columnPrefab","setupScene","showStartScreen","logNullLabels","startScreen","setSiblingIndex","playScreen","gameOverScreen","currentScoreLabel","console","error","scoreLabel","resetScene","forEach","node","destroy","canvas","getCanvas","canvasBottomY","getNodeHeight","createNode","setPosition","playerPrefab","playerHeight","setupNextColumn","futureStartColumnX","randomWidth","generateRandomWidth","getComponent","width","startColumnX","position","x","startColumnRightEdge","calculateNextColumnPosition","startX","animateInitialSetup","playerX","nextColumnX","animateNodes","animateSceneShift","_oldStartX","newStartX","nextX","callback","updatePlayer","instant","y","animateNodePosition","createStick","startY","stickPrefab","anchorY","setScale","angle","log","updateStick","scaleY","dropStick","stick","animateStickDrop","animatePlayerToStickEnd","stickEndX","updateColumnReferences","newStartColumn","newNextColumn","switchScreen","updateScoreLabel","showPlayScreen","showGameOverScreen","score","screen","active","label","context","prefix","string","toString","warn","updateScoreDisplay","getGrowthSpeed","growthSpeed","getStartColumnNode","getNextColumnNode","getPlayerNode","getCanvasWidth","getScene","getChildByName","height","prefab","parent","siblingIndex","setParent"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, UITransform, Vec3, director, instantiate, Prefab, Label } from 'cc';\nimport { PositionCalculator } from './PositionCalculator';\nimport { AnimationHelper } from './AnimationHelper';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameView')\nexport class GameView extends Component {\n    @property(Node) \n    startScreen: Node = null;\n\n    @property(Node) \n    playScreen: Node = null;\n\n    @property(Node) \n    gameOverScreen: Node = null;\n\n    @property(Prefab) \n    playerPrefab: Prefab = null;\n\n    @property(Prefab) \n    stickPrefab: Prefab = null;\n\n    @property(Prefab) \n    columnPrefab: Prefab = null;\n\n    @property({ type: Number, tooltip: \"(units per second)\" }) \n    growthSpeed: number = 2.5;\n    \n    @property(Label) \n    scoreLabel: Label | null = null;\n\n    @property(Label) \n    currentScoreLabel: Label | null = null;\n\n    private playerNode: Node | null = null;\n    public stickNode: Node | null = null;\n    private startColumnNode: Node | null = null;\n    private nextColumnNode: Node | null = null;\n    private canvasWidth: number = 0;\n    private columnHeight: number = 0;\n    private prefabColumnWidth: number = 0;\n    public randomPosition: number = 0;\n\n    start() {\n        this.setScreenIndices();\n        this.prefabColumnWidth = this.getNodeWidth(instantiate(this.columnPrefab));\n        this.setupScene();\n        this.showStartScreen();\n        this.logNullLabels();\n    }\n\n    private setScreenIndices() {\n        this.startScreen.setSiblingIndex(10);\n        this.playScreen.setSiblingIndex(11);\n        this.gameOverScreen.setSiblingIndex(12);\n    }\n\n    private logNullLabels() {\n        if (!this.currentScoreLabel) console.error(\"GameView: currentScoreLabel is not assigned!\");\n        if (!this.scoreLabel) console.error(\"GameView: scoreLabel is not assigned!\");\n    }\n\n    public resetScene() {\n        [this.startColumnNode, this.nextColumnNode, this.playerNode, this.stickNode].forEach(node => node?.destroy());\n        this.startColumnNode = this.nextColumnNode = this.playerNode = this.stickNode = null;\n        this.setupScene();\n    }\n\n    private setupScene() {\n        const canvas = this.getCanvas();\n        this.canvasWidth = this.getNodeWidth(canvas);\n        const canvasBottomY = -this.getNodeHeight(canvas) / 2;\n\n        this.startColumnNode = this.createNode(this.columnPrefab, canvas, 2);\n        this.columnHeight = this.getNodeHeight(this.startColumnNode);\n        this.startColumnNode.setPosition(0, canvasBottomY + this.columnHeight / 2, 0);\n\n        this.playerNode = this.createNode(this.playerPrefab, canvas, 4);\n        const playerHeight = this.getNodeHeight(this.playerNode);\n        this.playerNode.setPosition(0, canvasBottomY + this.columnHeight + playerHeight / 2, 0);\n    }\n\n    public setupNextColumn(futureStartColumnX?: number) {\n        const canvas = this.getCanvas();\n        this.nextColumnNode?.destroy();\n        this.nextColumnNode = this.createNode(this.columnPrefab, canvas, 2);\n\n        const randomWidth = PositionCalculator.generateRandomWidth(this.prefabColumnWidth);\n        this.nextColumnNode.getComponent(UITransform)!.width = randomWidth;\n\n        const startColumnX = futureStartColumnX ?? this.startColumnNode!.position.x;\n        const startColumnRightEdge = startColumnX + this.getNodeWidth(this.startColumnNode!) / 2;\n        const canvasBottomY = -this.getNodeHeight(canvas) / 2;\n\n        this.randomPosition = PositionCalculator.calculateNextColumnPosition(\n            startColumnRightEdge,\n            this.prefabColumnWidth * 2,\n            randomWidth,\n            this.canvasWidth\n        );\n\n        const startX = this.canvasWidth / 2 + randomWidth / 2 + this.randomPosition;\n        this.nextColumnNode.setPosition(startX, canvasBottomY + this.columnHeight / 2, 0);\n    }\n\n    animateInitialSetup(startColumnX: number, playerX: number, nextColumnX: number) {\n        AnimationHelper.animateNodes(this.node, [\n            { node: this.startColumnNode!, x: startColumnX },\n            { node: this.playerNode!, x: playerX },\n            { node: this.nextColumnNode!, x: nextColumnX }\n        ]);\n    }\n\n    animateSceneShift(_oldStartX: number, newStartX: number, playerX: number, nextX: number, callback?: () => void) {\n        AnimationHelper.animateNodes(this.node, [\n            { node: this.startColumnNode!, x: newStartX },\n            { node: this.nextColumnNode!, x: nextX },\n            { node: this.playerNode!, x: playerX }\n        ], callback);\n    }\n\n    updatePlayer(x: number, instant: boolean = false) {\n        if (!this.playerNode) return;\n        if (instant) {\n            this.playerNode.setPosition(x, this.playerNode.position.y, 0);\n        } else {\n            AnimationHelper.animateNodePosition(this.playerNode, x, this.playerNode.position.y, 0.3);\n        }\n    }\n\n    createStick(startX: number, startY: number) {\n        this.stickNode?.destroy();\n        this.stickNode = this.createNode(this.stickPrefab, this.getCanvas(), 5);\n        this.stickNode.setPosition(startX, startY, 0);\n        this.stickNode.getComponent(UITransform)!.anchorY = 0;\n        this.stickNode.setScale(new Vec3(1, 0.1, 1));\n        this.stickNode.angle = 0;\n        console.log(`Stick created at position: (${startX}, ${startY})`);\n        console.log(`Canvas size: (${this.canvasWidth}, ${this.getNodeHeight(this.getCanvas())})`);\n    }\n\n    updateStick(scaleY: number, angle: number) {\n        if (this.stickNode) {\n            this.stickNode.setScale(new Vec3(1, scaleY, 1));\n            this.stickNode.angle = angle;\n        }\n    }\n\n    dropStick(instant: boolean, callback: (stick: Node) => void) {\n        if (!this.stickNode) return;\n        const stick = this.stickNode;\n        if (instant) {\n            stick.angle = -90;\n            callback(stick);\n        } else {\n            AnimationHelper.animateStickDrop(stick, callback);\n        }\n    }\n\n    animatePlayerToStickEnd(stickEndX: number, callback: () => void) {\n        if (this.playerNode) {\n            AnimationHelper.animateNodePosition(this.playerNode, stickEndX, this.playerNode.position.y, 0.5, callback);\n        }\n    }\n\n    updateColumnReferences(newStartColumn: Node, newNextColumn: Node | null) {\n        this.startColumnNode = newStartColumn;\n        this.nextColumnNode = newNextColumn;\n    }\n\n    showStartScreen() {\n        this.switchScreen('start');\n        this.updateScoreLabel(this.currentScoreLabel, 0, \"start screen\");\n    }\n\n    showPlayScreen() {\n        this.switchScreen('play');\n        this.updateScoreLabel(this.currentScoreLabel, 0, \"play screen\");\n    }\n\n    showGameOverScreen(score: number) {\n        this.switchScreen('gameOver');\n        this.updateScoreLabel(this.scoreLabel, score, \"game over screen\", `Score: `);\n    }\n\n    private switchScreen(screen: 'start' | 'play' | 'gameOver') {\n        this.startScreen.active = screen === 'start';\n        this.playScreen.active = screen === 'play';\n        this.gameOverScreen.active = screen === 'gameOver';\n    }\n\n    private updateScoreLabel(label: Label | null, score: number, context: string, prefix: string = \"\") {\n        if (label) {\n            label.string = `${prefix}${score.toString()}`;\n        } else {\n            console.warn(`GameView: ${context} label is null`);\n        }\n    }\n\n    public updateScoreDisplay(score: number) {\n        this.updateScoreLabel(this.currentScoreLabel, score, \"current score display\");\n    }\n\n    public getGrowthSpeed(): number { return this.growthSpeed; }\n    public getStartColumnNode(): Node | null { return this.startColumnNode; }\n    public getNextColumnNode(): Node | null { return this.nextColumnNode; }\n    public getPlayerNode(): Node | null { return this.playerNode; }\n    public getCanvasWidth(): number { return this.canvasWidth; }\n\n    private getCanvas(): Node {\n        return director.getScene().getChildByName(\"Canvas\")!;\n    }\n\n    private getNodeWidth(node: Node): number {\n        return node.getComponent(UITransform)!.width;\n    }\n\n    private getNodeHeight(node: Node): number {\n        return node.getComponent(UITransform)!.height;\n    }\n\n    private createNode(prefab: Prefab, parent: Node, siblingIndex: number): Node {\n        const node = instantiate(prefab);\n        node.setParent(parent);\n        node.setSiblingIndex(siblingIndex);\n        return node;\n    }\n}"]}