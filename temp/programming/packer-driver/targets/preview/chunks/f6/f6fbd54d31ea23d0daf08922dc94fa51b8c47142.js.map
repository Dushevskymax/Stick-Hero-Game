{"version":3,"sources":["file:///C:/Users/user/StickHero/assets/scripts/UI/SceneMaker.ts"],"names":["_decorator","Component","UITransform","Vec3","director","tween","Entities","ccclass","property","SceneMaker","initialSceneCreate","entities","createAllEntities","allEntities","getEntities","startColumn","player","setParent","node","canvas","getScene","getChildByName","canvasHeight","getComponent","height","columnHeight","playerHeight","canvasBottomY","setPosition","initialSceneMove","nextColumn","canvasWidth","width","canvasRightX","canvasLeftX","startColumnWidth","startColumnX","animateNodeToPosition","playerWidth","playerOffset","playerX","nextColumnTransform","minWidth","maxWidth","randomWidth","Math","random","minTargetX","maxTargetX","targetX","y","position","offscreenX","parent","currentPos","to","start","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, UITransform, Vec3, director, tween} from 'cc';\nimport { Entities } from '../Game/Entities';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SceneMaker')\nexport class SceneMaker extends Component {\n\n    @property(Entities)\n    entities: Entities;\n\n    public initialSceneCreate() {\n        this.entities.createAllEntities();\n        const allEntities = this.entities.getEntities();\n\n        const startColumn = allEntities['startColumn'];\n        const player = allEntities['player'];\n        \n        startColumn.setParent(this.node);\n        player.setParent(this.node);\n\n        const canvas = director.getScene().getChildByName(\"Canvas\");\n        const canvasHeight = canvas.getComponent(UITransform).height;\n        const columnHeight = startColumn.getComponent(UITransform).height;\n        const playerHeight = player.getComponent(UITransform).height;\n\n        const canvasBottomY = -canvasHeight / 2;\n        startColumn.setPosition(0, canvasBottomY + columnHeight/2 , 0);\n        player.setPosition(0, canvasBottomY +  columnHeight/2 + playerHeight,0);\n    }\n\n    public initialSceneMove() {\n        const allEntities = this.entities.getEntities();\n        const player = allEntities['player'];\n        const startColumn = allEntities['startColumn'];\n        const nextColumn = allEntities['nextColumn'];\n    \n        const canvas = director.getScene().getChildByName(\"Canvas\");\n        const canvasWidth = canvas.getComponent(UITransform).width;\n        const canvasRightX = canvasWidth / 2;\n        const canvasLeftX = -canvasWidth / 2;\n    \n        const startColumnWidth = startColumn.getComponent(UITransform).width;\n        const startColumnX = canvasLeftX + startColumnWidth/2;\n        this.animateNodeToPosition(startColumn, startColumnX);\n    \n     \n        const playerWidth = player.getComponent(UITransform).width;\n        const playerOffset = playerWidth * 0.75;\n        const playerX = startColumnX + startColumnWidth / 2 - playerOffset;\n        this.animateNodeToPosition(player, playerX);\n    \n        const nextColumnTransform = nextColumn.getComponent(UITransform);\n        const minWidth = nextColumnTransform.width / 3;\n        const maxWidth = nextColumnTransform.width * 2;\n        const randomWidth = Math.random() * (maxWidth - minWidth) + minWidth;\n        nextColumnTransform.width = randomWidth;\n    \n        const minTargetX = startColumnX + startColumnWidth / 2 + randomWidth / 2;\n        const maxTargetX = canvasRightX - randomWidth / 2;\n        const targetX = Math.random() * (maxTargetX - minTargetX) + minTargetX;\n    \n        const y = startColumn.position.y;\n        const offscreenX = canvasRightX + randomWidth;\n        nextColumn.setPosition(offscreenX, y, 0);\n    \n        if (!nextColumn.parent) nextColumn.setParent(this.node);\n    \n        this.animateNodeToPosition(nextColumn, targetX);\n    }\n\n    private animateNodeToPosition(node: Node, targetX: number) {\n        const currentPos = node.position;\n        tween(node)\n            .to(0.3, { position: new Vec3(targetX, currentPos.y, 0) })\n            .start();\n    }\n\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n}\n    \n  \n"]}