{"version":3,"sources":["file:///C:/Users/user/StickHero/assets/scripts/Player/StickController.ts"],"names":["_decorator","Component","instantiate","Vec3","Input","input","UITransform","tween","Entities","GameLogic","ccclass","property","StickController","currentStick","isGrowing","start","on","EventType","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","createStick","dropStick","entities","stickPrefab","allEntities","getEntities","startColumn","columnWidth","getComponent","width","columnHeight","height","columnRightX","position","x","columnTopY","y","setPosition","canvas","parent","setParent","anchorY","setScale","setSiblingIndex","console","log","stick","to","angle","call","gameLogic","onStickDropComplete","growStick","deltaTime","currentScale","getScale","stickTransform","newY","growthSpeed","maxScaleY","maxHeight","update"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAyBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,K,OAAAA,K;;AAEnFC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,S,iBAAAA,S;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBX,U;;iCAKjBY,e,WADZF,OAAO,CAAC,iBAAD,C,UAGHC,QAAQ;AAAA;AAAA,+B,UAGRA,QAAQ;AAAA;AAAA,iC,2BANb,MACaC,eADb,SACqCX,SADrC,CAC+C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAcnCY,YAdmC,GAcd,IAdc;AAAA,eAenCC,SAfmC,GAevB,KAfuB;AAAA;;AAiB3CC,QAAAA,KAAK,GAAG;AACJV,UAAAA,KAAK,CAACW,EAAN,CAASZ,KAAK,CAACa,SAAN,CAAgBC,WAAzB,EAAsC,KAAKC,YAA3C,EAAyD,IAAzD;AACAd,UAAAA,KAAK,CAACW,EAAN,CAASZ,KAAK,CAACa,SAAN,CAAgBG,SAAzB,EAAoC,KAAKC,UAAzC,EAAqD,IAArD;AACH;;AAEOF,QAAAA,YAAY,GAAG;AACnB,cAAI,KAAKN,YAAT,EAAuB;AACvB,eAAKC,SAAL,GAAiB,IAAjB;AACA,eAAKQ,WAAL;AACH;;AAEOD,QAAAA,UAAU,GAAG;AACjB,cAAI,CAAC,KAAKR,YAAV,EAAwB;AACxB,eAAKC,SAAL,GAAiB,KAAjB;AACA,eAAKS,SAAL;AACH;;AAEOD,QAAAA,WAAW,GAAG;AAClB,eAAKT,YAAL,GAAoBX,WAAW,CAAC,KAAKsB,QAAL,CAAcC,WAAf,CAA/B;AAEA,gBAAMC,WAAW,GAAG,KAAKF,QAAL,CAAcG,WAAd,EAApB;AACA,gBAAMC,WAAW,GAAGF,WAAW,CAAC,aAAD,CAA/B;AAEA,gBAAMG,WAAW,GAAGD,WAAW,CAACE,YAAZ,CAAyBxB,WAAzB,EAAsCyB,KAA1D;AACA,gBAAMC,YAAY,GAAGJ,WAAW,CAACE,YAAZ,CAAyBxB,WAAzB,EAAsC2B,MAA3D;AACA,gBAAMC,YAAY,GAAGN,WAAW,CAACO,QAAZ,CAAqBC,CAArB,GAAyBP,WAAW,GAAG,CAA5D;AACA,gBAAMQ,UAAU,GAAGT,WAAW,CAACO,QAAZ,CAAqBG,CAArB,GAAyBN,YAAY,GAAG,CAA3D;AAEA,eAAKnB,YAAL,CAAkB0B,WAAlB,CAA8BL,YAA9B,EAA4CG,UAA5C,EAAwD,CAAxD;AAEA,gBAAMG,MAAM,GAAGZ,WAAW,CAACa,MAA3B;AACA,eAAK5B,YAAL,CAAkB6B,SAAlB,CAA4BF,MAA5B;AAEA,eAAK3B,YAAL,CAAkBiB,YAAlB,CAA+BxB,WAA/B,EAA4CqC,OAA5C,GAAsD,CAAtD;AACA,eAAK9B,YAAL,CAAkB+B,QAAlB,CAA2B,IAAIzC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAA3B;AACA,eAAKU,YAAL,CAAkBgC,eAAlB,CAAkC,EAAlC;AACH;;AAEOtB,QAAAA,SAAS,GAAG;AAChB,cAAI,CAAC,KAAKV,YAAV,EAAwB;AAExBiC,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,gBAAMC,KAAK,GAAG,KAAKnC,YAAnB;AACA,eAAKA,YAAL,GAAoB,IAApB;AAEAN,UAAAA,KAAK,CAACyC,KAAD,CAAL,CACKC,EADL,CACQ,GADR,EACa;AAAEC,YAAAA,KAAK,EAAE,CAAC;AAAV,WADb,EAEKC,IAFL,CAEU,MAAM;AACRL,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,iBAAKK,SAAL,CAAeC,mBAAf,CAAmCL,KAAnC;AACH,WALL,EAMKjC,KANL;AAOH;;AAIOuC,QAAAA,SAAS,CAACC,SAAD,EAAoB;AACrC,cAAI,KAAKzC,SAAL,IAAkB,KAAKD,YAA3B,EAAyC;AACrC,kBAAM2C,YAAY,GAAG,KAAK3C,YAAL,CAAkB4C,QAAlB,EAArB;AACA,kBAAMC,cAAc,GAAG,KAAK7C,YAAL,CAAkBiB,YAAlB,CAA+BxB,WAA/B,CAAvB;AAEA,gBAAIqD,IAAI,GAAGH,YAAY,CAAClB,CAAb,GAAiB,KAAKsB,WAAL,GAAmBL,SAA/C;AACA,kBAAMM,SAAS,GAAG,KAAKC,SAAL,GAAiBJ,cAAc,CAACzB,MAAlD;;AAEA,gBAAI0B,IAAI,IAAIE,SAAZ,EAAuB;AACnBF,cAAAA,IAAI,GAAGE,SAAP;AACA,mBAAK/C,SAAL,GAAiB,KAAjB;;AAEA,kBAAI,KAAKD,YAAT,EAAuB;AACnB,qBAAKU,SAAL;AACH;AACJ;;AAED,gBAAI,KAAKV,YAAT,EAAuB;AACnB,mBAAKA,YAAL,CAAkB+B,QAAlB,CAA2B,IAAIzC,IAAJ,CAAS,CAAT,EAAYwD,IAAZ,EAAkB,CAAlB,CAA3B;AACH;AACJ;AACJ;;AAEGI,QAAAA,MAAM,CAACR,SAAD,EAAoB;AACtB,eAAKD,SAAL,CAAeC,SAAf;AACH;;AAlG0C,O;;;;;;;;;;sFAQ1C5C,Q;;;;;iBACqB,C;;oFAErBA,Q;;;;;iBACmB,I","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec3, Input, input, UITransform, tween} from 'cc';\nimport { GameState } from '../Game/GameState';\nimport { Entities } from '../Game/Entities';\nimport { GameLogic } from '../Game/GameLogic';\nconst { ccclass, property } = _decorator;\n\n\n\n@ccclass('StickController')\nexport class StickController extends Component {\n\n    @property(Entities)\n    entities: Entities;\n\n    @property(GameLogic)\n    gameLogic: GameLogic;\n\n    @property\n    private growthSpeed = 3;\n\n    @property\n    private maxHeight = 1000;\n\n    private currentStick: Node = null;\n    private isGrowing = false;\n\n    start() {\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\n    }\n\n    private onTouchStart() {\n        if (this.currentStick) return;\n        this.isGrowing = true;\n        this.createStick();\n    }\n    \n    private onTouchEnd() {\n        if (!this.currentStick) return;\n        this.isGrowing = false;\n        this.dropStick();\n    }\n\n    private createStick() {\n        this.currentStick = instantiate(this.entities.stickPrefab);\n    \n        const allEntities = this.entities.getEntities();\n        const startColumn = allEntities['startColumn'];\n    \n        const columnWidth = startColumn.getComponent(UITransform).width;\n        const columnHeight = startColumn.getComponent(UITransform).height;\n        const columnRightX = startColumn.position.x + columnWidth / 2;\n        const columnTopY = startColumn.position.y + columnHeight / 2;\n    \n        this.currentStick.setPosition(columnRightX, columnTopY, 0);\n    \n        const canvas = startColumn.parent;\n        this.currentStick.setParent(canvas);                \n    \n        this.currentStick.getComponent(UITransform).anchorY = 0; \n        this.currentStick.setScale(new Vec3(1, 0, 1));      \n        this.currentStick.setSiblingIndex(10); \n    }\n    \n    private dropStick() {\n        if (!this.currentStick) return;\n    \n        console.log(\"Палка начала падать\");\n        const stick = this.currentStick;\n        this.currentStick = null;\n\n        tween(stick)\n            .to(0.3, { angle: -90 })\n            .call(() => {\n                console.log(\"Палка упала\");\n                this.gameLogic.onStickDropComplete(stick);\n            })\n            .start();\n    }\n    \n    \n\n    private growStick(deltaTime: number) {\n    if (this.isGrowing && this.currentStick) {\n        const currentScale = this.currentStick.getScale();\n        const stickTransform = this.currentStick.getComponent(UITransform);\n        \n        let newY = currentScale.y + this.growthSpeed * deltaTime;\n        const maxScaleY = this.maxHeight / stickTransform.height;\n        \n        if (newY >= maxScaleY) {\n            newY = maxScaleY;\n            this.isGrowing = false;\n           \n            if (this.currentStick) {\n                this.dropStick();  \n            }\n        }\n        \n        if (this.currentStick) {\n            this.currentStick.setScale(new Vec3(1, newY, 1));\n        }\n    }\n}\n\n    update(deltaTime: number) {\n        this.growStick(deltaTime);\n    }\n}\n"]}