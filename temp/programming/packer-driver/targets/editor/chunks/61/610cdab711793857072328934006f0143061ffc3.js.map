{"version":3,"sources":["file:///C:/Users/user/StickHero/assets/scripts/Game/GameManager.ts"],"names":["_decorator","Component","Input","input","PlayerState","GameLogic","GameState","SceneMaker","ScreenManager","ccclass","property","GameManager","playerState","WAITING","currentState","STARTSCREEN","setGameState","state","stateActions","resetGame","PLAYSCREEN","startGame","GAMEOVERSCREEN","screenManager","onGameStateChanged","getCurrentState","onStartButtonPressed","onRetryButtonPressed","onGameOver","start","sceneMaker","initialSceneCreate","on","EventType","TOUCH_START","onTouchStart","initialSceneMove","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiHC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,K,OAAAA,K;;AACpIC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,a,iBAAAA,a;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U;;6BAGjBW,W,WADZF,OAAO,CAAC,aAAD,C,UAGHC,QAAQ;AAAA;AAAA,yC,UAGRA,QAAQ;AAAA;AAAA,mC,UAGRA,QAAQ;AAAA;AAAA,iC,2BATb,MACaC,WADb,SACiCV,SADjC,CAC2C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAWvCW,WAXuC,GAWZ;AAAA;AAAA,0CAAYC,OAXA;AAAA,eAY/BC,YAZ+B,GAYL;AAAA;AAAA,sCAAUC,WAZL;AAAA;;AAchCC,QAAAA,YAAY,CAACC,KAAD,EAAmB;AAAA;;AAClC,eAAKH,YAAL,GAAoBG,KAApB;AAEA,gBAAMC,YAAY,GAAG;AACjB,aAAC;AAAA;AAAA,wCAAUH,WAAX,GAAyB,MAAM,KAAKI,SAAL,EADd;AAEjB,aAAC;AAAA;AAAA,wCAAUC,UAAX,GAAwB,MAAM,KAAKC,SAAL,EAFb;AAGjB,aAAC;AAAA;AAAA,wCAAUC,cAAX,GAA4B,MAAM,CAAE;AAHnB,WAArB;AAMA,iCAAAJ,YAAY,CAACD,KAAD,CAAZ,sCAAAC,YAAY;AACZ,eAAKK,aAAL,CAAmBC,kBAAnB,CAAsCP,KAAtC;AACH;;AAEMQ,QAAAA,eAAe,GAAc;AACpC,iBAAO,KAAKX,YAAZ;AACC;;AAEMY,QAAAA,oBAAoB,GAAG;AAC1B,eAAKV,YAAL,CAAkB;AAAA;AAAA,sCAAUI,UAA5B;AACH;;AAEMO,QAAAA,oBAAoB,GAAG;AAC1B,eAAKX,YAAL,CAAkB;AAAA;AAAA,sCAAUI,UAA5B;AACH;;AAEMQ,QAAAA,UAAU,GAAG;AAChB,eAAKZ,YAAL,CAAkB;AAAA;AAAA,sCAAUM,cAA5B;AACH;;AAEDO,QAAAA,KAAK,GAAG;AACJ,eAAKV,SAAL;AAEA,eAAKW,UAAL,CAAgBC,kBAAhB;AAEA,eAAKf,YAAL,CAAkB;AAAA;AAAA,sCAAUD,WAA5B;AACAZ,UAAAA,KAAK,CAAC6B,EAAN,CAAS9B,KAAK,CAAC+B,SAAN,CAAgBC,WAAzB,EAAsC,KAAKC,YAA3C,EAAyD,IAAzD;AAEH;;AAEMd,QAAAA,SAAS,GAAG;AACf,eAAKS,UAAL,CAAgBM,gBAAhB;AACH;;AAEMjB,QAAAA,SAAS,GAAG;AACf,eAAKP,WAAL,GAAmB;AAAA;AAAA,0CAAYC,OAA/B;AACH;;AAEDsB,QAAAA,YAAY,GAAG;AACX,cAAI,KAAKrB,YAAL,KAAsB;AAAA;AAAA,sCAAUM,UAApC,EAAgD;AACnD;;AAEDiB,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAnEsC,O","sourcesContent":["import { _decorator, Component, Node, tween, Vec2, Vec3, UITransform, RigidBody2D, RigidBodyComponent, director, instantiate, Prefab, Input, input} from 'cc';\nimport { PlayerState } from '../Player/PlayerState';\nimport { GameLogic} from './GameLogic'; \nimport { GameState } from './GameState'; \nimport { SceneMaker } from '../UI/SceneMaker';\nimport { ScreenManager} from '../UI/ScreenManager'; \n\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n\n    @property(ScreenManager)\n    screenManager: ScreenManager;\n\n    @property(SceneMaker)\n    sceneMaker: SceneMaker;\n\n    @property(GameLogic)\n    gameLogic: GameLogic; \n\n    playerState: PlayerState = PlayerState.WAITING;\n    private currentState: GameState = GameState.STARTSCREEN;\n\n    public setGameState(state: GameState) {\n        this.currentState = state;\n    \n        const stateActions = {\n            [GameState.STARTSCREEN]: () => this.resetGame(),\n            [GameState.PLAYSCREEN]: () => this.startGame(),\n            [GameState.GAMEOVERSCREEN]: () => {},\n        };\n        \n        stateActions[state]?.();\n        this.screenManager.onGameStateChanged(state);\n    }\n\n    public getCurrentState(): GameState {\n    return this.currentState;\n    }\n\n    public onStartButtonPressed() {\n        this.setGameState(GameState.PLAYSCREEN);\n    }\n\n    public onRetryButtonPressed() {\n        this.setGameState(GameState.PLAYSCREEN); \n    }\n\n    public onGameOver() {\n        this.setGameState(GameState.GAMEOVERSCREEN);\n    }\n\n    start() {\n        this.resetGame();\n       \n        this.sceneMaker.initialSceneCreate();\n\n        this.setGameState(GameState.STARTSCREEN);\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\n        \n    }\n\n    public startGame() {\n        this.sceneMaker.initialSceneMove();\n    }\n    \n    public resetGame() {\n        this.playerState = PlayerState.WAITING;\n    }\n    \n    onTouchStart() {\n        if (this.currentState !== GameState.PLAYSCREEN) return;\n    }\n\n    update(deltaTime: number) {\n       \n    }\n}"]}